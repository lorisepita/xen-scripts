#!/bin/sh

set -e

if [ "$UID" -ne 0 ]; then
    echo run as root
    exit 1
fi

if [ "$#" -ne 1 ]; then
    echo usage: generate-topology FILE
    exit 1
fi

FILE="$1"

main() {
    NBINTERFACES=$(xmllint --xpath "count(/topology/interfaces/interface)" $FILE)
    NBVMS=$(xmllint --xpath "count(/topology/vms/vm)" $FILE)
    DOMAIN=$(xmllint --xpath '/topology/@domain' $FILE 2>/dev/null \
        | sed 's/.*="\(.*\)".*/\1/')
    IPV6SUBNET=$(xmllint --xpath '/topology/@ipv6subnet' $FILE 2>/dev/null \
        | sed 's/.*="\(.*\)".*/\1/')

    if [ -z "$DOMAIN" ]; then
        DOMAIN="local"
    else
        sed '/'"$DOMAIN"'/d' -i /etc/hosts
    fi

    echo "- Domain: $DOMAIN"
    echo "- Interfaces: $NBINTERFACES"
    echo "- VMS: $NBVMS"
    echo

    cat >>/etc/hosts <<EOF
$(generateHosts)
EOF

    echo "--- CLEANING VMS ---"
    removeVMS
    rm -f /etc/xen/auto/*

    echo "--- CLEANING INTERFACES ---"
    switchCleanup
    dhcpcdCleanup

    echo "--- CREATING INTERFACES ---"

    for i in $(seq $NBINTERFACES); do
        switch "$i"
        continue
    done

    echo "--- SETTING VMS UP ---"
    mkdir -p /tmp/vm-gen/

    for i in $(seq $NBVMS); do
        NAME="$(getVMAttribute $i "domainName")"
        RAM=$(getVMAttribute $i "ram")
        MAXRAM=$(getVMAttribute $i "maxRam")
        VCPUS=$(getVMAttribute $i "vcpus")
        INTERFACES=$(generateInterfaces $i)
        DISKS="$(generateSetupDisks "$i" "$NAME")"
        cat > "/tmp/vm-gen/$NAME-gen.hvm" << EOF
$(generateVM "$NAME" "$RAM" "$MAXRAM" "$VCPUS" "$INTERFACES" "$DISKS")
boot="d"
EOF
        xl create "/tmp/vm-gen/$NAME-gen.hvm"
        register-shell-script "$NAME" "interface-script" <<<$(configureInterfaces $i $NAME)
        register-shell-script "$NAME" "disks-script" <<<$(configureDisks $i $NAME)
    done

    echo "Waiting for VMS completion, this might take a while"

    SECONDS=0
    while [ "$(xl list | wc -l)" -ne 2 ]; do
        sleep 1
        if [ "$SECONDS" -gt 150 ]; then
            removeVMS
        fi
    done

    echo "--- STARTING VMS ---"

    mkdir -p hvms

    for i in $(seq $NBVMS); do
        NAME="$(getVMAttribute $i "domainName")"
        RAM=$(getVMAttribute $i "ram")
        MAXRAM=$(getVMAttribute $i "maxRam")
        VCPUS=$(getVMAttribute $i "vcpus")
        INTERFACES=$(generateInterfaces $i)
        DISKS="$(generateDisks "$i" "$NAME")"
        cat > "hvms/$NAME.hvm" << EOF
$(generateVM "$NAME" "$RAM" "$MAXRAM" "$VCPUS" "$INTERFACES" "$DISKS")
boot="c"
EOF
        xl create "hvms/$NAME.hvm"
    done

    echo "--- ENABLING VMS ---"

    for i in $(seq $NBVMS); do
        NAME="$(getVMAttribute $i "domainName")"
        ln -s "$PWD/hvms/$NAME.hvm" "/etc/xen/auto/$NAME.hvm"
    done

    echo "--- CREATING ANSIBLE FILES ---"

    mkdir -p ansible
    generateAnsibleHosts
}

removeVMS() {
    local NAME
    for NAME in $(xl list | tail -n+3 | sed 's/ .*//'); do
        xl destroy "$NAME" 2>/dev/null
    done
}

generateVM() {
    local NAME MEMORY MAXRAM VCPUS INTERFACES DISKS
    NAME="$1"
    MEMORY="$2"
    MAX_MEMORY="$3"
    VCPUS="$4"
    INTERFACES="$5"
    DISKS="$6"
    cat <<EOF
type = "hvm"
builder = "hvm"
name = "$NAME"
memory = $MEMORY
maxmem = $MAX_MEMORY
vcpus = $VCPUS
vif = [ $INTERFACES ]
disk = [
$DISKS
]
vnc = 0
EOF
}

push() {
    printf "$2$(! [ -z "$1" ] && printf " ")$1"
}

laststack() {
    grep -oE '[^ ]+$' <<<"$1" || ( ! [ -z "$1" ] && printf " " )
}

pop() {
    sed 's/\( \|^\)'"$(laststack "$1")"'$//' <<<"$1"
}

instack() {
    [[ "$1" =~ (^| )$2($| ) ]]
}

generateMac() {
    local seed
    seed="$1"

    printf "00:16:3e:%02x:%02x:%02x" \
        $(python -c "
import random;
random.seed('$seed');
print('{:n} {:n} {:n}'
    .format(random.randrange(256),
            random.randrange(256),
            random.randrange(256)))
            ")
}

generateInterfaces() {
    local VMINTERFACES i changer VM RES IP TO MAC
    VM="$1"
    VMINTERFACES=$(getVMInterfaces $VM)
    RES=""
    for i in $(seq $VMINTERFACES); do
        IP="$(getVMInterfaceAttribute "$VM" "$i" "ip" | sed 's/\(.*\)\/.*/\1/')"
        TO="$(getVMInterfaceAttribute "$VM" "$i" "to")"
        MAC=$(generateMac "$(getVMAttribute "$VM" "domainName")$i$changer")
        RES="$RES"$(if [ "$i" -ne 1 ]; then printf ", "; fi)"'mac=$MAC,ip=$IP,bridge=$TO'"
    done
    echo $RES
}

generateSetupDisks() {
    local NAME
    VM="$1"
    NAME="$2"
    cat <<EOF
    'format=raw, vdev=hdc, access=ro, devtype=cdrom, target=/home/master/iso/slow-arch.iso',
EOF
    generateDisks "$VM" "$NAME"
}

generateDiskName() {
    local NAME MOUNT
    NAME="$1"
    MOUNT="$2"
    if [[ "$MOUNT" == "/" ]]; then
        echo "$NAME"
    else
        echo "$NAME$(echo "$MOUNT" | sed 's/\//-/g' | sed 's/\./--/g')"
    fi
}

generateDisks() {
    local VM NAME LETTER VMDISKS i VG SIZE MOUNT HASROOT
    VM="$1"
    NAME="$2"
    VMDISKS=$(getVMDisks $VM)
    LETTER="b"
    HASROOT=0
    for i in $(seq $VMDISKS); do
        VG="$(getVMDiskAttribute "$VM" "$i" "vg")"
        SIZE="$(getVMDiskAttribute "$VM" "$i" "size")"
        MOUNT="$(getVMDiskAttribute "$VM" "$i" "mount")"
        if [[ "$MOUNT" == "/" ]]; then
            HASROOT=1
            if ! [ -e "/dev/$VG/$(generateDiskName "$NAME" "$MOUNT")-disk" ]; then
                create-disk "$(generateDiskName "$NAME" "$MOUNT")" \
                    "$SIZE" "$VG" 1>/dev/null
            fi
            cat <<EOF
    'format=raw, vdev=sda, access=rw, target=/dev/$VG/$(generateDiskName "$NAME" "$MOUNT")-disk',
EOF
        fi
    done
    if [ "$HASROOT" -ne 1 ]; then
        echo "!! No root disk from VM $NAME" 1>&2
        exit 1
    fi

    for i in $(seq $VMDISKS); do
        VG="$(getVMDiskAttribute "$VM" "$i" "vg")"
        SIZE="$(getVMDiskAttribute "$VM" "$i" "size")"
        MOUNT="$(getVMDiskAttribute "$VM" "$i" "mount")"
        if [[ "$MOUNT" != "/" ]]; then
            if ! [ -e "/dev/$VG/$(generateDiskName "$NAME" "$MOUNT")-disk" ]; then
                create-disk "$(generateDiskName "$NAME" "$MOUNT")" \
                    "$SIZE" "$VG" 1>/dev/null
            fi
            cat <<EOF
    'format=raw, vdev=sd$LETTER, access=rw, target=/dev/$VG/$(generateDiskName "$NAME" "$MOUNT")-disk',
EOF
            LETTER="$(python -c "print(chr(ord('$LETTER') + 1))")"
        fi
    done
}

configureDisks() {
    local i LETTER VM NAME VMDISKS VG SIZE MOUNT
    VM="$1"
    NAME="$2"
    VMDISKS=$(getVMDisks $VM)
    LETTER="b"
    for i in $(seq $VMDISKS); do
        MOUNT="$(getVMDiskAttribute "$VM" "$i" "mount")"
        if [[ "$MOUNT" != "/" ]]; then
            cat <<EOF
if ! ( \
       parted /dev/xvd$LETTER align-check opt 1 \
    && (parted /dev/xvd$LETTER print | grep '.*ext4.*') \
); then
    parted -a optimal -s /dev/xvd$LETTER mklabel gpt || true
    parted -a optimal -s /dev/xvd$LETTER mkpart root ext4 0% 100% || true

    mkfs.ext4 -F /dev/xvd${LETTER}1
fi

mkdir -p /mnt$MOUNT
mount /dev/xvd${LETTER}1 /mnt$MOUNT
EOF
            LETTER="$(python -c "print(chr(ord('$LETTER') + 1))")"
        fi
    done
}

configureInterfaces() {
    local i VM NAME VMINTERFACES DHCP IP GATEWAY DNS IPV6MASK CIDR IPV6
    VM="$1"
    NAME="$2"
    VMINTERFACES=$(getVMInterfaces $VM)
    printf "#!/bin/sh\n\n"
    for i in $(seq $VMINTERFACES); do
        DHCP="$(getVMInterfaceAttribute "$VM" "$i" "dhcp")"
        if [[ "$DHCP" != "yes" ]]; then
            INTERFACE="eth$(($i - 1))"
            IP="$(getVMInterfaceAttribute "$VM" "$i" "ip")"
            GATEWAY="$(getVMInterfaceAttribute "$VM" "$i" "gateway")"
            DNS="$(getVMInterfaceAttribute "$VM" "$i" "dns")"
            IPV6MASK="$(getVMInterfaceAttribute "$VM" "$i" "ipv6mask")"
            CIDR=$(echo $IPV6MASK | sed 's/.*\/\(.*\)/\1/')
            IPV6MASK=$(echo $IPV6MASK | sed 's/\(.*\)\/.*/\1/')
            IPV6="$(generateIPv6 $IPV6MASK)/$CIDR"
            cat <<EOF
sed '/$(echo $IP | sed 's/\(.*\)\/.*/\1/')/d' /etc/hosts -i
configure-dhcp "$INTERFACE" "$IP" "$GATEWAY" "$DNS" "$IPV6"
echo '$(echo $IP | sed 's/\(.*\)\/.*/\1/')	$NAME.local	localhost' >> /etc/hosts
EOF
        else
            cat <<EOF
sed '/127\.0\.1\.1/d' /etc/hosts -i
configure-dhcp "$INTERFACE"
echo '127.0.1.1	$NAME.local	localhost' >> /etc/hosts
EOF
        fi
    done
    cat <<EOF
cat >>/etc/hosts <<ENDHOST

$(generateHosts)
ENDHOST
EOF
}

switch() {
    local i NAME PHYS phy CONNECT DHCP IP GATEWAY DNS
    i="$1"
    NAME=$(getInterfaceAttribute $i "name")
    if [[ "$NAME" == "" ]]; then
        echo "!! No interface name" 1>&2
        exit 1
    fi
    ovs-vsctl add-br "$NAME"
    PHYS=$(getInterfaceAttribute $i "phys")
    for phy in $PHYS; do
        ovs-vsctl add-port "$NAME" "$phy"
        continue
    done
    CONNECT=$(getInterfaceAttribute $i "connect")
    if [[ "$CONNECT" == "yes" ]]; then
        DHCP=$(getInterfaceAttribute $i "dhcp")
        if [[ "$DHCP" != "yes" ]]; then
            IP=$(getInterfaceAttribute $i "ip")
            GATEWAY=$(getInterfaceAttribute $i "gateway")
            DNS=$(getInterfaceAttribute $i "dns")
            IPV6MASK=$(getInterfaceAttribute $i "ipv6mask")
            CIDR=$(echo $IPV6MASK | sed 's/.*\/\(.*\)/\1/')
            IPV6MASK=$(echo $IPV6MASK | sed 's/\(.*\)\/.*/\1/')
            IPV6="$(generateIPv6 $IPV6MASK)/$CIDR"
            configure-dhcp "$NAME" "$IP" "$GATEWAY" "$DNS" "$IPV6"
        else
            configure-dhcp "$NAME"
        fi
    fi
}

generateIPv6() {
    local IPV6MASK
    IPV6MASK="$1"
    python -c \
        "import ipaddress; \
        network = ipaddress.ip_network('$IPV6SUBNET'); \
        ip = ipaddress.ip_address('$IPV6MASK'); \
        print(ipaddress.ip_address(int.from_bytes(network.network_address.packed, 'big') \
            | (int.from_bytes(ip.packed, 'big') \
            & int.from_bytes(network.hostmask.packed, 'big'))).compressed)"
}

generateHosts() {
    local i VM NAME VMINTERFACES DHCP IP GATEWAY DNS
    for VM in $(seq $NBVMS); do
        NAME="$(getVMAttribute "$VM" domainName)"
        VMINTERFACES=$(getVMInterfaces $VM)
        for i in $(seq $VMINTERFACES); do
            DHCP="$(getVMInterfaceAttribute "$VM" "$i" "dhcp")"
            if [[ "$DHCP" != "yes" ]]; then
                IP="$(getVMInterfaceAttribute "$VM" "$i" "ip" \
                    | sed 's/\(.*\)\/.*/\1/')"
                cat <<EOF
$IP	$NAME.$DOMAIN
EOF
            fi
        done
    done
}

generateAnsibleHosts() {
    local STACK VISITED VMINTERFACES TO NAME VM VMS INTERFACE HOSTS CHILDREN \
        IP ACCESS key curr

    declare -A ansibleHostsAccess
    declare -A ansibleHostsInterfacesVMS

    STACK=""

    # Filling stack with accessible interfaces from host
    for INTERFACE in $(seq $NBINTERFACES); do
        NAME="$(getInterfaceAttribute "$INTERFACE" "name")"
        if [[ "$(getInterfaceAttribute "$INTERFACE" "connect")" == "yes" ]]; then
            STACK="$(push "$STACK" "$NAME")"
            ansibleHostsAccess["$NAME"]=""
        fi
    done

    VISITED="$STACK"

    # Filling VMS per interfaces
    for VM in $(seq "$NBVMS"); do
        VMINTERFACES=$(getVMInterfaces $VM)
        for INTERFACE in $(seq "$VMINTERFACES"); do
            TO="$(getVMInterfaceAttribute "$VM" "$INTERFACE" "to")"
            ansibleHostsInterfacesVMS[$TO]="$(push \
                "${ansibleHostsInterfacesVMS[$TO]}" \
                "$VM")"
        done
    done

    cat >ansible/hosts <<EOF
all:
  children:
EOF

    VMS=""
    # Creating hosts file
    while ! [ -z "$STACK" ]; do
        curr="$(laststack "$STACK")"
        HOSTS=""
        CHILDREN=""

        for VM in ${ansibleHostsInterfacesVMS[$curr]}; do
            NAME="$(getVMAttribute "$VM" domainName)"
            if ! instack "$VMS" "$NAME"; then
                VMS="$(push "$VMS" "$NAME")"
                if ! [ -z "$CHILDREN" ]; then
                    CHILDREN="$(cat <<EOF
$CHILDREN
        $NAME:
          hosts:
            $NAME.$DOMAIN:
EOF
                    )"
                else
                    CHILDREN="$(cat <<EOF
        $NAME:
          hosts:
            $NAME.$DOMAIN:
EOF
                    )"
                fi
            else
                if ! [ -z "$HOSTS" ]; then
                    HOSTS="$(cat <<EOF
$HOSTS
        $NAME.$DOMAIN:
EOF
                    )"
                else
                    HOSTS="$(cat <<EOF
        $NAME.$DOMAIN:
EOF
                    )"

                fi
            fi
            VMINTERFACES=$(getVMInterfaces $VM)
            for INTERFACE in $(seq "$VMINTERFACES"); do
                TO="$(getVMInterfaceAttribute "$VM" "$INTERFACE" "to")"
                if [[ "$curr" == "$TO" ]]; then
                    IP="$(getVMInterfaceAttribute "$VM" "$INTERFACE" "ip" \
                        | sed 's/\(.*\)\/.*/\1/')"
                fi
            done
            for INTERFACE in $(seq "$VMINTERFACES"); do
                TO="$(getVMInterfaceAttribute "$VM" "$INTERFACE" "to")"
                [[ "$curr" == "$TO" ]] && continue
                if ! instack "$VISITED" "$TO"; then
                    STACK="$(push "$STACK" "$TO")"
                    VISITED="$(push "$VISITED" "$TO")"
                    ACCESS="${ansibleHostsAccess["$TO"]}"
                    if [ -z "$ACCESS" ]; then
                        ansibleHostsAccess["$TO"]="$IP"
                    else
                        ansibleHostsAccess["$TO"]="$ACCESS,$IP"
                    fi
                fi
            done
        done
        STACK="$(pop "$STACK")"
        cat >>ansible/hosts <<EOF
    $curr:
EOF
        if ! [ -z "$HOSTS" ]; then
            cat >>ansible/hosts <<EOF
      hosts:
$HOSTS
EOF
        fi
        if ! [ -z "$CHILDREN" ]; then
            cat >>ansible/hosts <<EOF
      children:
$CHILDREN
EOF
        fi
    done

    mkdir -p ansible/group_vars

    for key in "${!ansibleHostsAccess[@]}"; do
        ACCESS="${ansibleHostsAccess["$key"]}"
        if ! [ -z "$ACCESS" ]; then
            cat >"ansible/group_vars/$key.yml" <<EOF
---
ansible_ssh_common_args: '-o ProxyCommand="ssh -W %h:%p -q $ACCESS"'
EOF
        fi
    done

    cat >"ansible/group_vars/all.yml" <<EOF
---
domain: $DOMAIN
EOF

    for VM in $(seq $NBVMS); do 
        VMINTERFACES=$(getVMInterfaces $VM)
        NAME="$(getVMAttribute "$VM" domainName)"
        for i in $(seq $VMINTERFACES); do
            IPV6MASK="$(getVMInterfaceAttribute "$VM" "$i" "ipv6mask")"
            if [ -z "$IPV6MASK" ]; then
                continue
            fi
            IPV6MASK="$(echo "$IPV6MASK" | sed 's/\(.*\)\/.*/\1/')"
            cat >>"ansible/group_vars/all.yml" <<EOF
${NAME}_ipv6: $(generateIPv6 $IPV6MASK)
EOF
        break
        done
        for i in $(seq $VMINTERFACES); do
            IP="$(getVMInterfaceAttribute "$VM" "$i" "ip" | sed 's/\(.*\)\/.*/\1/')"
            if [ -z "$IP" ]; then
                continue
            fi
            cat >>"ansible/group_vars/all.yml" <<EOF
${NAME}_ip: $IP
EOF
        break
        done
    done

    cat >>"ansible/group_vars/all.yml" <<EOF
public_ip: $(curl https://ipinfo.io/ip)
EOF

    unset ansibleHostsAccess
    unset ansibleHostsInterfacesVMS
}

getInterfaceAttribute() {
    xmllint --xpath '/topology/interfaces/interface['"$1"']/@'"$2"'' $FILE 2>/dev/null \
            | sed 's/.*'"$2"'="\(.*\)".*/\1/'
}

getVMAttribute() {
    xmllint --xpath '/topology/vms/vm['"$1"']/@'"$2"'' $FILE 2>/dev/null \
            | sed 's/.*'"$2"'="\(.*\)".*/\1/'
}

getVMInterfaces() {
    xmllint --xpath "count(/topology/vms/vm[$1]/interfaces/interface)" $FILE
}

getVMDisks() {
    xmllint --xpath "count(/topology/vms/vm[$1]/disks/disk)" $FILE
}

getVMInterfaceAttribute() {
    xmllint --xpath '/topology/vms/vm['"$1"']/interfaces/interface['"$2"']/@'"$3"'' \
        $FILE 2>/dev/null \
        | sed 's/.*'"$3"'="\(.*\)".*/\1/'
}

getVMDiskAttribute() {
    xmllint --xpath '/topology/vms/vm['"$1"']/disks/disk['"$2"']/@'"$3"'' \
        $FILE 2>/dev/null \
        | sed 's/.*'"$3"'="\(.*\)".*/\1/'
}

switchCleanup() {
    local switch
    for switch in $(sudo ovs-vsctl show | grep Bridge | sed 's/.*Bridge \(.*\)/\1/'); do
        ovs-vsctl del-br "$switch"
    done
}

dhcpcdCleanup() {
    local dhcp B
    for dhcp in $(ls ls /etc/systemd/system/multi-user.target.wants/dhcpcd@* 2>/dev/null); do
        B="$(echo "$dhcp" | sed 's/.*\/\(dhcpcd@.*\.service\)/\1/')"
        systemctl stop "$B"
        systemctl disable "$B"
    done
}

main
