#!/bin/sh

set -e

if [ "$UID" -ne 0 ]; then
    echo run as root
    exit 1
fi

if [ "$#" -ne 1 ]; then
    echo usage: generate-topology FILE
    exit 1
fi

generateVM() {
    NAME="$1"
    MEMORY="$2"
    MAX_MEMORY="$3"
    VCPUS="$4"
    INTERFACES="$5"
    DISKS="$6"
    cat <<EOF
type = "hvm"
builder = "hvm"
name = "$NAME"
memory = $MEMORY
maxmem = $MAX_MEMORY
vcpus = $VCPUS
vif = [ $INTERFACES ]
disk = [
$DISKS
]
vnc = 0
EOF
}

generateInterfaces() {
    VM="$1"
    NBINTERFACES=$(xmllint --xpath "count(/topology/vms/vm[$VM]/interfaces/interface)" $FILE)
    RES=""
    for i in $(seq $NBINTERFACES); do
        IP="$(getVMInterfaceAttribute "$VM" "$i" "ip" | sed 's/\(.*\)\/.*/\1/')"
        TO="$(getVMInterfaceAttribute "$VM" "$i" "to")"
        RES="$RES"$(if [ "$i" -ne 1 ]; then printf ", "; fi)"'ip=$IP,bridge=$TO'"
    done
    echo $RES
}

generateSetupDisks() {
    NAME="$1"
    cat <<EOF
    'format=raw, vdev=hdc, access=ro, devtype=cdrom, target=/home/master/iso/slow-arch.iso',
    'format=raw, vdev=xvda, access=rw, target=/dev/vg0/$NAME-disk'
EOF
}

generateDisks() {
    NAME="$1"
    cat <<EOF
    'format=raw, vdev=xvda, access=rw, target=/dev/vg0/$NAME-disk'
EOF
}

configureInterfaces() {
    local i
    VM="$1"
    NAME="$2"
    NBINTERFACES=$(xmllint --xpath "count(/topology/vms/vm[$VM]/interfaces/interface)" $FILE)
    printf "#!/bin/sh\n\n"
    for i in $(seq $NBINTERFACES); do
        DHCP="$(getVMInterfaceAttribute "$VM" "$i" "dhcp")"
        if [[ "$DHCP" != "yes" ]]; then
            INTERFACE="eth$(($i - 1))"
            IP="$(getVMInterfaceAttribute "$VM" "$i" "ip")"
            GATEWAY="$(getVMInterfaceAttribute "$VM" "$i" "gateway")"
            DNS="$(getVMInterfaceAttribute "$VM" "$i" "dns")"
            cat <<EOF
sed '/$(echo $IP | sed 's/\(.*\)\/.*/\1/')/d' /etc/hosts -i
configure-dhcp "$INTERFACE" "$IP" "$GATEWAY" "$DNS"
echo '$(echo $IP | sed 's/\(.*\)\/.*/\1/')	$NAME.local	localhost' >> /etc/hosts
EOF
        else
            cat <<EOF
sed '/127\.0\.1\.1/d' /etc/hosts -i
configure-dhcp "$INTERFACE"
echo '127.0.1.1	$NAME.local	localhost' >> /etc/hosts
EOF
        fi
    done
}

getInterfaceAttribute() {
    xmllint --xpath '/topology/interfaces/interface['"$1"']/@'"$2"'' $FILE 2>/dev/null \
            | sed 's/.*'"$2"'="\(.*\)".*/\1/'
}

getVMAttribute() {
    xmllint --xpath '/topology/vms/vm['"$1"']/@'"$2"'' $FILE 2>/dev/null \
            | sed 's/.*'"$2"'="\(.*\)".*/\1/'
}

getVMInterfaceAttribute() {
    xmllint --xpath '/topology/vms/vm['"$1"']/interfaces/interface['"$2"']/@'"$3"'' \
        $FILE 2>/dev/null \
        | sed 's/.*'"$3"'="\(.*\)".*/\1/'
}

switchCleanup() {
    for switch in $(sudo ovs-vsctl show | grep Bridge | sed 's/.*Bridge \(.*\)/\1/'); do
        ovs-vsctl del-br "$switch"
    done
}

dhcpcdCleanup() {
    for dhcp in $(ls ls /etc/systemd/system/multi-user.target.wants/dhcpcd@* 2>/dev/null); do
        B="$(echo "$dhcp" | sed 's/.*\/\(dhcpcd@.*\.service\)/\1/')"
        systemctl stop "$B"
        systemctl disable "$B"
    done
}

switch() {
    i="$1"
    NAME=$(getInterfaceAttribute $i "name")
    if [[ "$NAME" == "" ]]; then
        echo "!! No interface name" 1>&2
        exit 1
    fi
    ovs-vsctl add-br "$NAME"
    PHYS=$(getInterfaceAttribute $i "phys")
    for phy in $PHYS; do
        ovs-vsctl add-port "$NAME" "$phy"
    done
    CONNECT=$(getInterfaceAttribute $i "connect")
    DHCP=$(getInterfaceAttribute $i "dhcp")
    if [[ "$CONNECT" == "yes" ]]; then
        if [[ "$DHCP" != "yes" ]]; then
            IP=$(getInterfaceAttribute $i "ip")
            GATEWAY=$(getInterfaceAttribute $i "gateway")
            DNS=$(getInterfaceAttribute $i "dns")
            configure-dhcp "$NAME" "$IP" "$GATEWAY" "$DNS"
        else
            configure-dhcp "$NAME"
        fi
    fi
}

FILE="$1"
NBINTERFACES=$(xmllint --xpath "count(/topology/interfaces/interface)" $FILE)
NBVMS=$(xmllint --xpath "count(/topology/vms/vm)" $FILE)

echo "- Interfaces: $NBINTERFACES"
echo "- VMS: $NBVMS"
echo

echo "--- CLEANING INTERFACES ---"
#switchCleanup
#dhcpcdCleanup

echo "--- CLEANING VMS ---"
for i in $(seq $NBVMS); do
    NAME="$(getVMAttribute $i "domainName")"
    xl list "$NAME" >/dev/null && xl destroy "$NAME"
done
rm -f /etc/xen/auto/*

echo "--- CREATING INTERFACES ---"

for i in $(seq $NBINTERFACES); do
    #switch "$i"
    continue
done

echo "--- SETTING VMS UP ---"
mkdir -p /tmp/vm-gen/

for i in $(seq $NBVMS); do
    NAME="$(getVMAttribute $i "domainName")"
    RAM=$(getVMAttribute $i "ram")
    MAXRAM=$(getVMAttribute $i "maxRam")
    VCPUS=$(getVMAttribute $i "vcpus")
    INTERFACES=$(generateInterfaces $i)
    DISKS=$(generateSetupDisks $NAME)
    ! ( [ -L "/dev/vg0/$NAME-disk" ] && [ -e "/dev/vg0/$NAME-disk" ] ) \
        && create-disk $NAME "$(getVMAttribute $i "disk")"
    cat > "/tmp/vm-gen/$NAME-gen.hvm" << EOF
$(generateVM "$NAME" "$RAM" "$MAXRAM" "$VCPUS" "$INTERFACES" "$DISKS")
boot="d"
EOF
    xl create "/tmp/vm-gen/$NAME-gen.hvm"
    register-shell-script "$NAME" "interface-script" <<<$(configureInterfaces $i $NAME)
done

echo "Waiting for VMS completion, this might take a while"

while [ "$(xl list | wc -l)" -ne 2 ]; do
    sleep 1
done

echo "--- STARTING VMS ---"

for i in $(seq $NBVMS); do
    NAME="$(getVMAttribute $i "domainName")"
    RAM=$(getVMAttribute $i "ram")
    MAXRAM=$(getVMAttribute $i "maxRam")
    VCPUS=$(getVMAttribute $i "vcpus")
    INTERFACES=$(generateInterfaces $i)
    DISKS=$(generateDisks $NAME)
    cat > "$NAME.hvm" << EOF
$(generateVM "$NAME" "$RAM" "$MAXRAM" "$VCPUS" "$INTERFACES" "$DISKS")
boot="c"
EOF
    xl create "$NAME.hvm"
done

echo "--- ENABLING VMS ---"

for i in $(seq $NBVMS); do
    NAME="$(getVMAttribute $i "domainName")"
    ln -s "$PWD/$NAME.hvm" "/etc/xen/auto/$NAME.hvm"
done

echo "--- CREATING ANSIBLE FILES ---"

mkdir -p ansible
